{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '@environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\"; // import 'rxjs/add/operator/catch';\n// import 'rxjs/add/observable/throw';\n\nexport let AccountService = /*#__PURE__*/(() => {\n  class AccountService {\n    constructor(router, http) {\n      this.router = router;\n      this.http = http;\n      this.userSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('user')));\n      this.user = this.userSubject.asObservable();\n    }\n\n    get userValue() {\n      return this.userSubject.value;\n    }\n\n    login(user_nome, user_accessKey) {\n      return this.http.post(`${environment.apiUrl}/api/Conta/login`, {\n        user_nome,\n        user_accessKey\n      }).pipe(map(user => {\n        sessionStorage.clear();\n        sessionStorage.setItem('user_nome', user_nome);\n        console.log(user_nome); // store user details and jwt token in local storage to keep user logged in between page refreshes\n\n        localStorage.setItem('user', JSON.stringify(user)); // sessionStorage.setItem('user_nome', user.user_nome.toString());\n\n        this.userSubject.next(user);\n        return user;\n      }));\n    }\n\n    logout() {\n      // remove user from local storage and set current user to null\n      sessionStorage.removeItem('user_nome');\n      localStorage.removeItem('user');\n      this.userSubject.next(null);\n      this.router.navigate(['/account/login']);\n    }\n\n    register(user) {\n      return this.http.post(`${environment.apiUrl}/api/Conta/registrar`, user);\n    }\n\n    alterarSenha(user) {\n      return this.http.patch(`${environment.apiUrl}/api/Conta/alterarSenha`, user);\n    }\n\n    getAll() {\n      return this.http.get(`${environment.apiUrl}/api/Conta`);\n    } // getById(id: string) {\n    //     return this.http.get<User>(`${environment.apiUrl}/users/${id}`);\n    // }\n    // update(id, params) {\n    //     return this.http.put(`${environment.apiUrl}/users/${id}`, params)\n    //         .pipe(map(x => {\n    //             // update stored user if the logged in user updated their own record\n    //             if (id == this.userValue.id) {\n    //                 // update local storage\n    //                 const user = { ...this.userValue, ...params };\n    //                 localStorage.setItem('user', JSON.stringify(user));\n    //                 // publish updated user to subscribers\n    //                 this.userSubject.next(user);\n    //             }\n    //             return x;\n    //         }));\n    // }\n\n\n    delete(id) {\n      return this.http.delete(`${environment.apiUrl}/api/Conta/delete/${id}`).pipe(map(x => {\n        // auto logout if the logged in user deleted their own record\n        if (id == this.userValue.user_id) {\n          this.logout();\n        }\n\n        return x;\n      }));\n    }\n\n  }\n\n  AccountService.ɵfac = function AccountService_Factory(t) {\n    return new (t || AccountService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n  };\n\n  AccountService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AccountService,\n    factory: AccountService.ɵfac,\n    providedIn: 'root'\n  });\n  return AccountService;\n})();","map":null,"metadata":{},"sourceType":"module"}