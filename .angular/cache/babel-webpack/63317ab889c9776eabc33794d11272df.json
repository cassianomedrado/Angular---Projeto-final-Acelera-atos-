{"ast":null,"code":"import { HttpErrorResponse } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let HandlerErroService = /*#__PURE__*/(() => {\n  class HandlerErroService {\n    constructor(route) {\n      this.route = route;\n    }\n\n    handler(erroResposta) {\n      this.erros = [];\n\n      if (typeof erroResposta === 'string') {\n        this.erros.push({\n          mensagem: erroResposta,\n          type: 'danger',\n          dismissible: true\n        });\n      } else if (erroResposta instanceof HttpErrorResponse && erroResposta.status >= 400 && erroResposta.status <= 499) {\n        if (erroResposta.status === 401) {\n          this.route.navigate(['/nao-autorizado']);\n        }\n\n        if (erroResposta.status === 404) {\n          this.route.navigate(['/404']);\n        }\n\n        try {\n          erroResposta.error.errors.forEach(e => {\n            this.erros.push({\n              mensagem: e.mensagem,\n              type: 'danger',\n              dismissible: true\n            });\n          });\n        } catch (e) {}\n      } else if (erroResposta instanceof HttpErrorResponse && erroResposta.status >= 500 && erroResposta.status <= 599) {\n        this.route.navigate(['/500']);\n      } else {\n        this.erros.push({\n          mensagem: 'Erro ao processar serviço remoto. Tente novamente.',\n          type: 'danger',\n          dismissible: true\n        });\n      }\n\n      return this.erros;\n    }\n\n  }\n\n  HandlerErroService.ɵfac = function HandlerErroService_Factory(t) {\n    return new (t || HandlerErroService)(i0.ɵɵinject(i1.Router));\n  };\n\n  HandlerErroService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HandlerErroService,\n    factory: HandlerErroService.ɵfac,\n    providedIn: 'root'\n  });\n  return HandlerErroService;\n})();","map":null,"metadata":{},"sourceType":"module"}